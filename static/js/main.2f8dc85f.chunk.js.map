{"version":3,"sources":["components/section/Section.tsx","components/dropdown/Dropdown.tsx","components/dropdown/DropdownItem.tsx","components/masthead/Masthead.tsx","components/main/Main.tsx","components/button/Button.tsx","hooks/useFetch.ts","utils/index.tsx","routes/Landing.tsx","store/currency.tsx","store/prices.tsx","components/currency/CurrencyDisplay.tsx","routes/Find.tsx","routes/Make.tsx","routes/NotFound.tsx","components/currency/CurrencySelector.tsx","App.tsx","index.tsx"],"names":["Section","className","name","children","props","classes","classNames","Dropdown","id","onChange","DropdownItem","value","key","Masthead","Main","Button","useFetch","getParams","param","split","liquorList","Landing","history","useHistory","sortedLiquorList","sort","React","useState","selectedItem","setSelectedItem","onSubmit","e","preventDefault","push","pathname","search","htmlFor","event","target","map","liquor","string","charAt","toUpperCase","slice","type","currencyContentState","atom","default","pricesContentState","BTC","ETH","LTC","USD","CurrencyDisplay","currency","price","fakeCocktails","Find","exchangeRate","input","location","isFancy","setIsFancy","useRecoilValue","prices","handleFancyFlip","currentCurrency","calculatedCost","parseFloat","toFixed","Fragment","onClick","cocktail","to","Make","currencies","CurrencySelector","setCurrency","useSetRecoilState","App","setPrices","useEffect","fetch","then","response","json","data","rates","exact","path","component","NotFound","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.2f8dc85f.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\n\nimport './Section.scss';\n\ninterface MainProps {\n  className?: string,\n  children: ReactNode,\n  name: string,\n}\n\nconst Section: React.FC<MainProps> = ({ className, name, children, ...props }) => {\n\n  const classes = classNames(\n    'section',\n    `section-${name}`,\n    className\n  );\n\n  return (\n    <section className={classes} {...props}>{children}</section>\n  );\n};\n\nexport default Section;\n\n","import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\n\nimport './Dropdown.scss';\n\ninterface DropdownProps {\n  className?: string,\n  name: string,\n  id: string,\n  children: ReactNode,\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({ className, name, id, children, onChange, ...props }) => {\n\n  const classes = classNames(\n    'dropdown',\n    className\n  );\n\n\n  return (\n    <select className={classes} name={name} id={id} onChange={onChange} {...props}>\n        {children}\n     </select>\n  );\n};\n\nexport default Dropdown;\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './DropdownItem.scss';\n\ninterface DropdownItemProps {\n  className?: string,\n  value: string,\n  children: string\n}\n\nconst DropdownItem: React.FC<DropdownItemProps> = ({ className, value, children, ...props }) => {\n\n  const classes = classNames(\n    'dropdownitem',\n    className\n  );\n\n  return (\n    <option className={classes} value={value} {...props} key={value}>{children}</option>\n  );\n};\n\nexport default DropdownItem;\n","import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\n\nimport './Masthead.scss';\n\ninterface SampleProps {\n  className?: string,\n  children: ReactNode\n}\n\nconst Masthead: React.FC<SampleProps> = ({ className, children, ...props }) => {\n\n  const classes = classNames(\n    'masthead',\n    className\n  );\n\n\n  return (\n    <header className={classes} {...props}> { children } </header>\n  );\n};\n\nexport default Masthead;\n","import React, { ReactNode } from \"react\";\r\nimport classNames from 'classnames';\r\n\r\nimport \"./Main.scss\";\r\n\r\ninterface MainProps {\r\n    children: ReactNode,\r\n    className?: string,\r\n    name: string\r\n}\r\n\r\nconst Main: React.FC<MainProps> = ({ children, className, name='base'}: MainProps) => {\r\n  \r\n  const classes = classNames(\r\n    'page',\r\n    `page-${name}`,\r\n    className\r\n  );\r\n\r\n  return (\r\n    <main className={classes}>\r\n      {children}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Button.scss';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n    className?: string\n    children: React.ReactNode\n}\n\nconst Button: React.FC<ButtonProps> = ({ className, children, ...props }) => {\n\n    const classes = classNames(\n        'button',\n        className\n    );\n\n    return (\n        <button className={classes} {...props}>\n            {children}\n        </button>\n    );\n}\n\nexport default Button;","import { useEffect, useReducer, useRef } from 'react'\n\ninterface State<T> {\n  data?: T\n  error?: Error\n}\n\ntype Cache<T> = { [url: string]: T }\n\ntype Action<T> =\n  | { type: 'loading' }\n  | { type: 'fetched'; payload: T }\n  | { type: 'error'; payload: Error }\n\nfunction useFetch<T = unknown>(url?: string, options?: RequestInit): State<T> {\n  const cache = useRef<Cache<T>>({})\n  // Used to prevent state update if the component is unmounted\n  const cancelRequest = useRef<boolean>(false)\n  const initialState: State<T> = {\n    error: undefined,\n    data: undefined,\n  }\n\n  // Keep state logic separated\n  const fetchReducer = (state: State<T>, action: Action<T>): State<T> => {\n    switch (action.type) {\n      case 'loading':\n        return { ...initialState }\n      case 'fetched':\n        return { ...initialState, data: action.payload }\n      case 'error':\n        return { ...initialState, error: action.payload }\n      default:\n        return state\n    }\n  }\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState)\n\n  useEffect(() => {\n    // Do nothing if the url is not given\n    if (!url) return\n    const fetchData = async () => {\n      dispatch({ type: 'loading' })\n      // If a cache exists for this url, return it\n      if (cache.current[url]) {\n        dispatch({ type: 'fetched', payload: cache.current[url] })\n        return\n      }\n      try {\n        const response = await fetch(url, options)\n        if (!response.ok) {\n          throw new Error(response.statusText)\n        }\n        const data = (await response.json()) as T\n        cache.current[url] = data\n        if (cancelRequest.current) return\n        dispatch({ type: 'fetched', payload: data })\n      } catch (error) {\n        if (cancelRequest.current) return\n        dispatch({ type: 'error', payload: error as Error })\n      }\n    }\n    void fetchData()\n    return () => {\n      cancelRequest.current = true\n    }\n  }, [url])\n  return state\n}\n\nexport default useFetch","import useFetch from \"../hooks/useFetch\";\n\nexport const capitalizeFirstLetter = (string:string):string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n// get params from url\nexport const getParams = (param: string):string => {\n  return param.split(\"=\")[1];\n}\n\n// gets the current exhcnage rates for crypto currencies\nexport const getCryptoPrices = ():any => {\n  const url = 'https://api.coinbase.com/v2/exchange-rates?currency=USD';\n  const { data, error } = useFetch(url);\n  return { data, error };\n}\n\n// converts price and limits decimal places\nexport const normalizePrice = (price: number, exchangeRate: number, digitsPastDecimal: number):number => {\n  return parseFloat((exchangeRate * price).toFixed(digitsPastDecimal)); // sub for current price later\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { Dropdown, DropdownItem, Main, Button } from '../components';\nimport { capitalizeFirstLetter } from '../utils';\n\nimport './Landing.scss';\n\nconst liquorList = [\n  'vodka',\n  'gin',\n  'whiskey',\n  'tequila',\n  'rum'\n];\n\nconst Landing: React.FC = () => {\n\n  const history = useHistory();\n\n  const sortedLiquorList = liquorList.sort();\n\n  const [selectedItem, setSelectedItem] = React.useState(sortedLiquorList[0]);\n\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>):void => {\n    e.preventDefault();\n    history.push({\n      pathname: '/find',\n      search: `?liquor=${selectedItem}`\n    });\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    setSelectedItem(value);\n  };\n\n  return (\n    <Main name='landing'>\n      <form onSubmit={handleSubmit} className='landing-form'>\n        <label htmlFor='liquor'> Choose a liquor</label>\n        <Dropdown name='liquor' id='liquor' onChange={handleChange}>\n          { sortedLiquorList.map(liquor => <DropdownItem value={liquor} key={liquor}>{capitalizeFirstLetter(liquor)}</DropdownItem>)}\n        </Dropdown>\n        <Button type='submit' value='Submit'>Find it</Button>\n      </form>\n    </Main>\n  );\n};\n\nexport default Landing;\n","import { atom } from \"recoil\";\n\nexport interface CurrencyContent {\n  type: 'USD' | 'ETH' | 'BTC' | 'LTC';\n}\n\nconst initialState: CurrencyContent = {\n  type: 'USD'\n};\n\nexport const currencyContentState = atom<CurrencyContent>({\n  key: \"currencyContents\",\n  default: initialState,\n});\n","import { atom } from \"recoil\";\n\nexport interface PricesContent {\n\tBTC: number,\n\tETH: number,\n\tLTC: number,\n\tUSD: number,\n}\n\nconst initialState: PricesContent = {\n\tBTC: 0,\n\tETH: 0,\n\tLTC: 0,\n\tUSD: 1\n};\n\nexport const pricesContentState = atom<PricesContent>({\n  key: \"PricesContents\",\n  default: initialState,\n});\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './Currency.scss';\n\ninterface CurrencyDisplayProps {\n  className?: string,\n  price: number,\n  currency: 'USD' | 'ETH' | 'BTC' | 'LTC'\n}\n\nconst CurrencyDisplay: React.FC<CurrencyDisplayProps> = ({ className, currency, price, ...props }) => {\n\n  const classes = classNames(\n    'currency',\n    `currency-${currency}`,\n    className\n  );\n\n\n  return (\n    <span className={classes} {...props}> { price } <sub>{currency}</sub></span>\n  );\n};\n\nexport default CurrencyDisplay;\n","import React, { useState } from 'react';\nimport { useRecoilValue } from 'recoil'\nimport { currencyContentState } from \"../store/currency\";\nimport { pricesContentState } from \"../store/prices\";\nimport { useHistory, Link } from 'react-router-dom';\nimport { getParams, normalizePrice } from '../utils';\nimport { Main, Section, Button } from '../components';\n\nimport './Find.scss';\nimport { CurrencyDisplay } from '../components/currency';\n\nconst fakeCocktails = [\n  'foo',\n  'bar'\n]\n\nconst Find: React.FC = () => {\n\n  const input = getParams(useHistory().location.search);\n  const [isFancy, setIsFancy] = useState(false);\n  const currency = useRecoilValue(currencyContentState);\n  const prices = useRecoilValue(pricesContentState);\n\n  const handleFancyFlip = () => { \n    setIsFancy(!isFancy);\n  }\n\n  const currentCurrency = currency.type;\n  const calculatedCost = normalizePrice(500, prices[currentCurrency], 5);\n  return (\n    <Main name='find' className={isFancy ? 'isFancy' : 'isCheap'}>\n      <Section name='results'>\n        { !isFancy\n          ? <React.Fragment>\n            <span className='section-results-title'> The absolute cheapest, bottom shelf {input} we could find is</span>\n            <span> foo for <CurrencyDisplay price={calculatedCost} currency={currency.type}/></span>\n            <Button onClick={handleFancyFlip}>\n              ✨ I'm feeling fancy ✨\n            </Button>\n          </React.Fragment>\n          : <React.Fragment>\n            <span> Oh, you're feeling fancy? Try: bar </span>\n            <Button onClick={handleFancyFlip}>\n                I'm feeling cheap\n            </Button>\n          </React.Fragment>\n      }\n      </Section>\n      <Section name='cocktails'>\n        <span> here are the cocktails you could make</span>\n        <ul>\n          {fakeCocktails.map(cocktail =>\n            <li key={cocktail} >\n              <Link to={{ pathname: '/make', search: `cocktail=${cocktail}`}}>\n                {cocktail}\n              </Link>\n            </li>\n          )}\n        </ul>\n      </Section>\n    </Main>\n  );\n};\n\nexport default Find;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { getParams } from '../utils';\nimport { Main, Section } from '../components';\n\nconst Make: React.FC = () => {\n\n  const input = getParams(useHistory().location.search);\n\n  return (\n    <Main name='make'>\n      <Section name='results'>\n        <span> You want to make {input} </span>\n      </Section>\n    </Main>\n  );\n};\n\nexport default Make;\n","import React from 'react';\n\nimport './NotFound.scss';\n\nconst Landing: React.FC = () => {\n\n  return (\n    <span> oops </span>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\nimport { useSetRecoilState } from 'recoil'\n\nimport { Dropdown, DropdownItem } from '../';\nimport { currencyContentState } from \"../../store/currency\";\n\nconst currencies = ['USD', 'ETH', 'BTC', 'LTC'];\n\nconst CurrencySelector: React.FC = () => {\n\n  const setCurrency = useSetRecoilState(currencyContentState);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n\n    // TODO rewrite this later\n    switch(value) {\n      case 'USD':\n        setCurrency({ type: 'USD' });\n        break;\n      case 'ETH':\n        setCurrency({ type: 'ETH' });\n        break;\n      case 'BTC':\n        setCurrency({ type: 'BTC' });\n        break;\n      case 'LTC':\n        setCurrency({ type: 'LTC' });\n        break;\n      default:\n        setCurrency({ type: 'USD' });\n        break;\n    }\n  };\n\n  return (\n    <Dropdown name='currency' id='currency' onChange={handleChange}>\n      { currencies.map(currency => <DropdownItem value={currency} key={currency}>{currency}</DropdownItem>)}\n    </Dropdown>\n  );\n};\n\nexport default CurrencySelector;\n","import React, { useEffect } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { useSetRecoilState } from 'recoil'\r\n\r\nimport Landing from './routes/Landing';\r\nimport Find from './routes/Find';\r\nimport Make from './routes/Make';\r\nimport NotFound from './routes/NotFound';\r\n\r\nimport './App.scss';\r\nimport { Masthead } from './components';\r\n\r\nimport CurrencySelector from './components/currency/CurrencySelector';\r\nimport { pricesContentState } from \"./store/prices\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n  const setPrices = useSetRecoilState(pricesContentState);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.coinbase.com/v2/exchange-rates?currency=USD\")\r\n    .then(response => response.json())\r\n    .then(data =>\r\n      setPrices({\r\n        BTC: data.data.rates.BTC,\r\n        ETH: data.data.rates.ETH,\r\n        LTC: data.data.rates.LTC,\r\n        USD: 1\r\n      })\r\n  )},[])\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <Masthead> Seabass <CurrencySelector/></Masthead>\r\n        <Switch>\r\n          <Route exact path='/' component={ Landing }/>\r\n          <Route path='/find' component={ Find }/>\r\n          <Route path='/make' component={ Make }/>\r\n          <Route component={ NotFound } />\r\n        </Switch>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { BrowserRouter as Router, } from \"react-router-dom\";\nimport {\n  RecoilRoot\n} from 'recoil';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <RecoilRoot><App /></RecoilRoot>\n  </Router>, document.getElementById(\"root\"));\n"],"sourceRoot":""}